package ubiq

import (
	"testing"
)

func testFF1(t *testing.T, K, T []byte, PT, CT string, r int, args ...interface{}) {
	if len([]rune(PT)) != len([]rune(CT)) {
		t.FailNow()
	}

	ff1, err := NewFF1(K, T, 0, 0, r, args...)
	if err != nil {
		t.Fatal(err)
	}

	out, err := ff1.Encrypt(PT, nil)
	if err != nil {
		t.Fatal(err)
	}

	if out != CT {
		t.FailNow()
	}

	out, err = ff1.Decrypt(CT, nil)
	if err != nil {
		t.Fatal(err)
	}

	if out != PT {
		t.FailNow()
	}
}

func TestFF1NIST1(t *testing.T) {
	testFF1(t,
		[]byte{
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
			0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
		},
		[]byte{},
		"0123456789",
		"2433477484",
		10)
}

func TestFF1NIST2(t *testing.T) {
	testFF1(t,
		[]byte{
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
			0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
		},
		[]byte{
			0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32,
			0x31, 0x30,
		},
		"0123456789",
		"6124200773",
		10)
}

func TestFF1NIST3(t *testing.T) {
	testFF1(t,
		[]byte{
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
			0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
		},
		[]byte{
			0x37, 0x37, 0x37, 0x37, 0x70, 0x71, 0x72, 0x73,
			0x37, 0x37, 0x37,
		},
		"0123456789abcdefghi",
		"a9tv40mll9kdu509eum",
		36)
}

func TestFF1NIST4(t *testing.T) {
	testFF1(t,
		[]byte{
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
			0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
			0xef, 0x43, 0x59, 0xd8, 0xd5, 0x80, 0xaa, 0x4f,
		},
		[]byte{},
		"0123456789",
		"2830668132",
		10)
}

func TestFF1NIST5(t *testing.T) {
	testFF1(t,
		[]byte{
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
			0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
			0xef, 0x43, 0x59, 0xd8, 0xd5, 0x80, 0xaa, 0x4f,
		},
		[]byte{
			0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32,
			0x31, 0x30,
		},
		"0123456789",
		"2496655549",
		10)
}

func TestFF1NIST6(t *testing.T) {
	testFF1(t,
		[]byte{
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
			0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
			0xef, 0x43, 0x59, 0xd8, 0xd5, 0x80, 0xaa, 0x4f,
		},
		[]byte{
			0x37, 0x37, 0x37, 0x37, 0x70, 0x71, 0x72, 0x73,
			0x37, 0x37, 0x37,
		},
		"0123456789abcdefghi",
		"xbj3kv35jrawxv32ysr",
		36)
}

func TestFF1NIST7(t *testing.T) {
	testFF1(t,
		[]byte{
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
			0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
			0xef, 0x43, 0x59, 0xd8, 0xd5, 0x80, 0xaa, 0x4f,
			0x7f, 0x03, 0x6d, 0x6f, 0x04, 0xfc, 0x6a, 0x94,
		},
		[]byte{},
		"0123456789",
		"6657667009",
		10)
}

func TestFF1NIST8(t *testing.T) {
	testFF1(t,
		[]byte{
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
			0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
			0xef, 0x43, 0x59, 0xd8, 0xd5, 0x80, 0xaa, 0x4f,
			0x7f, 0x03, 0x6d, 0x6f, 0x04, 0xfc, 0x6a, 0x94,
		},
		[]byte{
			0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32,
			0x31, 0x30,
		},
		"0123456789",
		"1001623463",
		10)
}

func TestFF1NIST9(t *testing.T) {
	testFF1(t,
		[]byte{
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
			0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
			0xef, 0x43, 0x59, 0xd8, 0xd5, 0x80, 0xaa, 0x4f,
			0x7f, 0x03, 0x6d, 0x6f, 0x04, 0xfc, 0x6a, 0x94,
		},
		[]byte{
			0x37, 0x37, 0x37, 0x37, 0x70, 0x71, 0x72, 0x73,
			0x37, 0x37, 0x37,
		},
		"0123456789abcdefghi",
		"xs8a0azh2avyalyzuwd",
		36)
}

func TestFF1Base2(t *testing.T) {
	testFF1(t,
		[]byte{
			0xf4, 0xa1, 0x16, 0xd6, 0xee, 0x40, 0x6a, 0x53,
			0xa5, 0x6c, 0xbe, 0x0f, 0x4a, 0xa7, 0xb1, 0x00,
			0x1c, 0xdc, 0x0a, 0x55, 0xca, 0xc9, 0x63, 0xcf,
			0x5a, 0xce, 0x39, 0x04, 0x88, 0xb3, 0x47, 0x7a,
		},
		[]byte{
			0xfd, 0x7f, 0x4b, 0x99, 0x45, 0xa3, 0xc5, 0x35,
			0xad, 0xb4, 0x72, 0x00, 0x27, 0x11, 0x6c, 0xa0,
			0xf4, 0x98, 0x7d, 0x7f, 0x3f, 0xdb, 0xa9, 0xbb,
			0xc4, 0x0e, 0x75, 0x37, 0x5f, 0xea, 0xa6, 0x3c,
		},
		"00000101011011011101001001010011100111100011001",
		"10110101001110101101110000011000000011111100111",
		2)
}

func TestFF1Base2A(t *testing.T) {
	testFF1(t,
		[]byte{
			0xf4, 0xa1, 0x16, 0xd6, 0xee, 0x40, 0x6a, 0x53,
			0xa5, 0x6c, 0xbe, 0x0f, 0x4a, 0xa7, 0xb1, 0x00,
			0x1c, 0xdc, 0x0a, 0x55, 0xca, 0xc9, 0x63, 0xcf,
			0x5a, 0xce, 0x39, 0x04, 0x88, 0xb3, 0x47, 0x7a,
		},
		[]byte{
			0xfd, 0x7f, 0x4b, 0x99, 0x45, 0xa3, 0xc5, 0x35,
			0xad, 0xb4, 0x72, 0x00, 0x27, 0x11, 0x6c, 0xa0,
			0xf4, 0x98, 0x7d, 0x7f, 0x3f, 0xdb, 0xa9, 0xbb,
			0xc4, 0x0e, 0x75, 0x37, 0x5f, 0xea, 0xa6, 0x3c,
		},
		"000010101100011111010000111001100001011010011110100100110010010000000101000011000000001111110101111100111001001001100100100110101111110000011101010111001111010000010010111110101100001001100011",
		"111110001101110010010110001010100001101011001010011010111001001101101000011110000110110000001101011110101100001101000011101110110101001111100001011010010000010111001110010011001100001111100101",
		2)
}

func TestFF1Base2B(t *testing.T) {
	testFF1(t,
		[]byte{
			0xf4, 0xa1, 0x16, 0xd6, 0xee, 0x40, 0x6a, 0x53,
			0xa5, 0x6c, 0xbe, 0x0f, 0x4a, 0xa7, 0xb1, 0x00,
			0x1c, 0xdc, 0x0a, 0x55, 0xca, 0xc9, 0x63, 0xcf,
			0x5a, 0xce, 0x39, 0x04, 0x88, 0xb3, 0x47, 0x7a,
		},
		[]byte{
			0xfd, 0x7f, 0x4b, 0x99, 0x45, 0xa3, 0xc5, 0x35,
			0xad, 0xb4, 0x72, 0x00, 0x27, 0x11, 0x6c, 0xa0,
			0xf4, 0x98, 0x7d, 0x7f, 0x3f, 0xdb, 0xa9, 0xbb,
			0xc4, 0x0e, 0x75, 0x37, 0x5f, 0xea, 0xa6, 0x3c,
		},
		"00000111011010010101111110011110001011111000110100000101001010001100001101111000010000101011100100010111011101001010010100101010100011010101010000101111111001111100110100001100011001011010010000110",
		"00110011001000111100010111110001000110110110010010101101001011101001101010010001111001010100100001110101010101101110110010100110101110111011111010110010101110000001101000101010100011010100111011000",
		2)
}

func TestFF1Base2C(t *testing.T) {
	testFF1(t,
		[]byte{
			0xf4, 0xa1, 0x16, 0xd6, 0xee, 0x40, 0x6a, 0x53,
			0xa5, 0x6c, 0xbe, 0x0f, 0x4a, 0xa7, 0xb1, 0x00,
			0x1c, 0xdc, 0x0a, 0x55, 0xca, 0xc9, 0x63, 0xcf,
			0x5a, 0xce, 0x39, 0x04, 0x88, 0xb3, 0x47, 0x7a,
		},
		[]byte{
			0xfd, 0x7f, 0x4b, 0x99, 0x45, 0xa3, 0xc5, 0x35,
			0xad, 0xb4, 0x72, 0x00, 0x27, 0x11, 0x6c, 0xa0,
			0xf4, 0x98, 0x7d, 0x7f, 0x3f, 0xdb, 0xa9, 0xbb,
			0xc4, 0x0e, 0x75, 0x37, 0x5f, 0xea, 0xa6, 0x3c,
		},
		"00001100010001110001000111100100001111110110000000001010000001111100000111100101110111101100101011001010010010001011100000100100011100010111111000111101010111010110011001000010000101000100000111011001000010000111001010100101111011111100111111101010001111101111101000101111101100101001000010110101011100011011001110101101001100100101101000000111100100110000001111011000110011110000011011101111001110101101111001001111010101011001100011001111001110",
		"10101101001111110110110001010101110111011010101001110011111101101101000001110010100110110011011101000101010001111101100000110000101110000000110001011000100000111001111011101011100011100010100001010011110100010001001000001101110010110111100010101001000100100000010111100000101000010100011001100011111110011100111110011100111111011001101011100010100110001100111000100000101011111110100011110011101001010110001000011010011011101001101000001100110100",
		2)
}

func TestFF1Base2D(t *testing.T) {
	testFF1(t,
		[]byte{
			0xf4, 0xa1, 0x16, 0xd6, 0xee, 0x40, 0x6a, 0x53,
			0xa5, 0x6c, 0xbe, 0x0f, 0x4a, 0xa7, 0xb1, 0x00,
			0x1c, 0xdc, 0x0a, 0x55, 0xca, 0xc9, 0x63, 0xcf,
			0x5a, 0xce, 0x39, 0x04, 0x88, 0xb3, 0x47, 0x7a,
		},
		[]byte{
			0xfd, 0x7f, 0x4b, 0x99, 0x45, 0xa3, 0xc5, 0x35,
			0xad, 0xb4, 0x72, 0x00, 0x27, 0x11, 0x6c, 0xa0,
			0xf4, 0x98, 0x7d, 0x7f, 0x3f, 0xdb, 0xa9, 0xbb,
			0xc4, 0x0e, 0x75, 0x37, 0x5f, 0xea, 0xa6, 0x3c,
		},
		"0000100001110000110111000100110011101011100100100000011011100101010101010100111000001001001010110110101100010001111111101001100100001110000001101100101000110000001101100100110101101101111011010100010100110101110011101101001000010100110111101111000100001011010011000000000011001010110000110111110010111110001010111000011100010010100111011110010100110101000100101010010100001110010101001100010001111000011110001101011010001010110110010000111001110110101",
		"0101111000110110000111000111011100110111101000100000100010100110100010001101000101111000100000111000000011110111001001101010100001111100100101100100000000000011100011110010100010000010001001101100011100111110101110000101111010100111100000111000000111011011010101111100110101000110001110110001110011111000111110010000100010000101010110000010010100001111011010110111011111101000100000010111101010000011011110001000000011111010110010100101001000111101110",
		2)
}

func TestFF1Base2E(t *testing.T) {
	testFF1(t,
		[]byte{
			0xf4, 0xa1, 0x16, 0xd6, 0xee, 0x40, 0x6a, 0x53,
			0xa5, 0x6c, 0xbe, 0x0f, 0x4a, 0xa7, 0xb1, 0x00,
			0x1c, 0xdc, 0x0a, 0x55, 0xca, 0xc9, 0x63, 0xcf,
			0x5a, 0xce, 0x39, 0x04, 0x88, 0xb3, 0x47, 0x7a,
		},
		[]byte{
			0xfd, 0x7f, 0x4b, 0x99, 0x45, 0xa3, 0xc5, 0x35,
			0xad, 0xb4, 0x72, 0x00, 0x27, 0x11, 0x6c, 0xa0,
			0xf4, 0x98, 0x7d, 0x7f, 0x3f, 0xdb, 0xa9, 0xbb,
			0xc4, 0x0e, 0x75, 0x37, 0x5f, 0xea, 0xa6, 0x3c,
		},
		
		
		2)
}

func TestFF1Base10A(t *testing.T) {
	testFF1(t,
		[]byte{
			0xf4, 0xa1, 0x16, 0xd6, 0xee, 0x40, 0x6a, 0x53,
			0xa5, 0x6c, 0xbe, 0x0f, 0x4a, 0xa7, 0xb1, 0x00,
			0x1c, 0xdc, 0x0a, 0x55, 0xca, 0xc9, 0x63, 0xcf,
			0x5a, 0xce, 0x39, 0x04, 0x88, 0xb3, 0x47, 0x7a,
		},
		[]byte{
			0xfd, 0x7f, 0x4b, 0x99, 0x45, 0xa3, 0xc5, 0x35,
			0xad, 0xb4, 0x72, 0x00, 0x27, 0x11, 0x6c, 0xa0,
			0xf4, 0x98, 0x7d, 0x7f, 0x3f, 0xdb, 0xa9, 0xbb,
			0xc4, 0x0e, 0x75, 0x37, 0x5f, 0xea, 0xa6, 0x3c,
		},
		
		
		10)
}

func TestFF1UTF8(t *testing.T) {
	var alphabet string = "abcdefghijklmnopqrstuvwxyzこんにちは世界"

	testFF1(t,
		[]byte{
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
			0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
			0xef, 0x43, 0x59, 0xd8, 0xd5, 0x80, 0xaa, 0x4f,
			0x7f, 0x03, 0x6d, 0x6f, 0x04, 0xfc, 0x6a, 0x94,
		},
		[]byte{},
		"こんにちは世界", "はpyはjeん",
		len([]rune(alphabet)), alphabet)
}

func benchmarkFF1(
	b *testing.B, f func(*FF1, string, []byte) (string, error),
	K, T []byte, INP, OUT string, r int, args ...interface{}) {
	ff1, err := NewFF1(K, T, 0, 0, r, args...)
	if err != nil {
		panic(err)
	}

	res, err := f(ff1, INP, T)
	if err != nil {
		panic(err)
	} else if res != OUT {
		panic(res + " != " + OUT)
	}

	for i := 0; i < b.N; i++ {
		f(ff1, INP, T)
	}
}

func BenchmarkFF1Encrypt128(b *testing.B) {
	benchmarkFF1(b, (*FF1).Encrypt,
		[]byte{
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
			0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
		},
		[]byte{},
		"0123456789",
		"2433477484",
		10)
}

func BenchmarkFF1Encrypt192(b *testing.B) {
	benchmarkFF1(b, (*FF1).Encrypt,
		[]byte{
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
			0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
			0xef, 0x43, 0x59, 0xd8, 0xd5, 0x80, 0xaa, 0x4f,
		},
		[]byte{},
		"0123456789",
		"2830668132",
		10)
}

func BenchmarkFF1Encrypt256(b *testing.B) {
	benchmarkFF1(b, (*FF1).Encrypt,
		[]byte{
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
			0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
			0xef, 0x43, 0x59, 0xd8, 0xd5, 0x80, 0xaa, 0x4f,
			0x7f, 0x03, 0x6d, 0x6f, 0x04, 0xfc, 0x6a, 0x94,
		},
		[]byte{},
		"0123456789",
		"6657667009",
		10)
}

func BenchmarkFF1Decrypt128(b *testing.B) {
	benchmarkFF1(b, (*FF1).Decrypt,
		[]byte{
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
			0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
		},
		[]byte{},
		"2433477484",
		"0123456789",
		10)
}

func BenchmarkFF1Decrypt192(b *testing.B) {
	benchmarkFF1(b, (*FF1).Decrypt,
		[]byte{
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
			0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
			0xef, 0x43, 0x59, 0xd8, 0xd5, 0x80, 0xaa, 0x4f,
		},
		[]byte{},
		"2830668132",
		"0123456789",
		10)
}

func BenchmarkFF1Decrypt256(b *testing.B) {
	benchmarkFF1(b, (*FF1).Decrypt,
		[]byte{
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
			0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
			0xef, 0x43, 0x59, 0xd8, 0xd5, 0x80, 0xaa, 0x4f,
			0x7f, 0x03, 0x6d, 0x6f, 0x04, 0xfc, 0x6a, 0x94,
		},
		[]byte{},
		"6657667009",
		"0123456789",
		10)
}
